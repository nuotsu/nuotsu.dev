/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch'
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: 'sanity.imagePalette'
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions'
	height?: number
	width?: number
	aspectRatio?: number
}

export type SanityFileAsset = {
	_id: string
	_type: 'sanity.fileAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type Geopoint = {
	_type: 'geopoint'
	lat?: number
	lng?: number
	alt?: number
}

export type Slug = {
	_type: 'slug'
	current?: string
	source?: string
}

export type Project = {
	_id: string
	_type: 'project'
	_createdAt: string
	_updatedAt: string
	_rev: string
	orderRank?: string
	url?: string
	date?: string
	repo?: string
	screenshot?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	metadata?: Metadata
}

export type Metadata = {
	_type: 'metadata'
	title?: string
	description?: string
	slug?: Slug
}

export type Site = {
	_id: string
	_type: 'site'
	_createdAt: string
	_updatedAt: string
	_rev: string
	headline?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?: 'normal' | 'h1'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}>
	about?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}>
	portrait?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type SanityImageCrop = {
	_type: 'sanity.imageCrop'
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot'
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageAsset = {
	_id: string
	_type: 'sanity.imageAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData'
	name?: string
	id?: string
	url?: string
}

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata'
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityFileAsset
	| Geopoint
	| Slug
	| Project
	| Metadata
	| Site
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/routes/(frontend)/+layout.server.ts
// Variable: LAYOUT_QUERY
// Query: {		'site': *[_type == 'site'][0],		'projects': *[_type == 'project']|order(orderRank),	}
export type LAYOUT_QUERYResult = {
	site: {
		_id: string
		_type: 'site'
		_createdAt: string
		_updatedAt: string
		_rev: string
		headline?: Array<{
			children?: Array<{
				marks?: Array<string>
				text?: string
				_type: 'span'
				_key: string
			}>
			style?: 'h1' | 'normal'
			listItem?: 'bullet' | 'number'
			markDefs?: Array<{
				href?: string
				_type: 'link'
				_key: string
			}>
			level?: number
			_type: 'block'
			_key: string
		}>
		about?: Array<{
			children?: Array<{
				marks?: Array<string>
				text?: string
				_type: 'span'
				_key: string
			}>
			style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
			listItem?: 'bullet' | 'number'
			markDefs?: Array<{
				href?: string
				_type: 'link'
				_key: string
			}>
			level?: number
			_type: 'block'
			_key: string
		}>
		portrait?: {
			asset?: {
				_ref: string
				_type: 'reference'
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
			}
			media?: unknown
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			_type: 'image'
		}
	} | null
	projects: Array<{
		_id: string
		_type: 'project'
		_createdAt: string
		_updatedAt: string
		_rev: string
		orderRank?: string
		url?: string
		date?: string
		repo?: string
		screenshot?: {
			asset?: {
				_ref: string
				_type: 'reference'
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
			}
			media?: unknown
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			_type: 'image'
		}
		metadata?: Metadata
	}>
}

// Source: ./src/routes/(frontend)/[slug]/+page.server.ts
// Variable: PROJECT_PAGE_QUERY
// Query: *[_type == 'project' && metadata.slug.current == $slug][0]
export type PROJECT_PAGE_QUERYResult = {
	_id: string
	_type: 'project'
	_createdAt: string
	_updatedAt: string
	_rev: string
	orderRank?: string
	url?: string
	date?: string
	repo?: string
	screenshot?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	metadata?: Metadata
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
	interface SanityQueries {
		"{\n\t\t'site': *[_type == 'site'][0],\n\t\t'projects': *[_type == 'project']|order(orderRank),\n\t}": LAYOUT_QUERYResult
		"\n\t\t*[_type == 'project' && metadata.slug.current == $slug][0]\n\t": PROJECT_PAGE_QUERYResult
	}
}
